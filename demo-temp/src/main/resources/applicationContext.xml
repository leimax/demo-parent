<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 打开bean注解支持( 常用注释有 : @Repository(数据库层注解) @Service(服务层注解) @Controller(控制层注解) @Component(通用注解) ) -->
    <context:component-scan base-package="com.accelerator.demo">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- Jackson Json 工具 -->
    <bean id="objectMapper" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"
          p:simpleDateFormat="yyyy-MM-dd HH:mm:ss"
          p:indentOutput="true">
        <property name="serializationInclusion">
            <util:constant static-field="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY"/>
        </property>
    </bean>

    <context:property-placeholder file-encoding="ISO-8859-1"
                                  location="classpath:jdbc.properties"
                                  ignore-unresolvable="true"/>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- 连接数据库URL -->
        <property name="url" value="${jdbc.url}"/>
        <!-- 数据库用户名 -->
        <property name="username" value="${jdbc.username}"/>
        <!-- 数据库密码 -->
        <property name="password" value="${jdbc.password}"/>
        <!-- 连接数据库驱动 -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <!-- 连接池中可同时连接的最大的连接数(默认值为8,高峰单机器在20并发左右,自己根据应用场景定) maxIdle:连接池中最大的空闲的连接数,超过的空闲连接将被释放,如果设置为负数表示不限制(默认为8个,maxIdle不能设置太小,因为假如在高负载的情况下,连接的打开时间比关闭的时间快,会引起连接池中idle的个数上升超过maxIdle,而造成频繁的连接销毁和创建,类似于jvm参数中的Xmx设置) -->
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>
        <!-- 连接池启动时创建的初始化连接数量(默认值为0) -->
        <property name="initialSize" value="${jdbc.pool.minIdle}"/>
        <!-- 最大等待时间,当没有可用连接时,连接池等待连接释放的最大时间,超过该时间限制会抛出异常,如果设置-1表示无限等待(默认为无限,调整为60000ms,避免因线程池不够用,而导致请求被无限制挂起) -->
        <property name="maxWait" value="${jdbc.pool.maxWait}"/>
        <!-- 连接池中最大的空闲的连接数,超过的空闲连接将被释放,如果设置为负数表示不限制(默认为8个,maxIdle不能设置太小,因为假如在高负载的情况下,连接的打开时间比关闭的时间快,会引起连接池中idle的个数上升超过maxIdle,而造成频繁的连接销毁和创建,类似于jvm参数中的Xmx设置) -->
        <property name="maxIdle" value="${jdbc.pool.maxIdle}"/>
        <!-- 连接池中最小的空闲的连接数,低于这个数量会被创建新的连接(默认为0,调整为5,该参数越接近maxIdle,性能越好,因为连接的创建和销毁,都是需要消耗资源的；但是不能太大,因为在机器很空闲的时候,也会创建低于minidle个数的连接,类似于jvm参数中的Xmn设置) -->
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <!-- 超过removeAbandonedTimeout时间后,是否进行没用连接(废弃)的回收(默认为false,调整为true) -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超过时间限制,回收没有用(废弃)的连接(默认为300秒,调整为180) -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 打开检查,用异步线程evict进行检查,GenericObjectPool中针对pool管理,起了一个Evict的TimerTask定时线程进行控制(可通过设置参数timeBetweenEvictionRunsMillis>0),定时对线程池中的链接进行validateObject校验,对无效的链接进行关闭后,会调用ensureMinIdle,适当建立链接保证最小的minIdle连接数 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 检查连接用sql -->
        <property name="validationQuery" value="${jdbc.pool.validationQuery}"/>
        <!-- 在执行检查时,通过statement设置,statement.setQueryTimeout(validationQueryTimeout) -->
        <property name="validationQueryTimeout" value="3"/>
        <!-- 设置的Evict线程的时间,单位ms,大于0才会开启evict检查线程,每过 timeBetweenEvictionRunsMillis毫秒,Evictor会调用evict()方法,检查连接池中的连接的闲置时间是否大于minEvictableIdleTimeMillis毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="3600000"/>
        <!-- 见上方注释,这里设置每十分钟检查空闲一个小时的连接 -->
        <property name="minEvictableIdleTimeMillis" value="600000"/>
        <!-- 每次检查链接的数量,建议设置和maxActive一样大,这样每次可以有效检查所有的链接 -->
        <property name="numTestsPerEvictionRun" value="${jdbc.pool.maxActive}"/>
    </bean>

</beans>