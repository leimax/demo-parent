<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置 -->
    <properties resource="jdbc.properties"/>

    <!--指定特定数据库的jdbc驱动jar包的位置 -->
    <!--
    context元素有一个defaultModelType属性,这个属性的值会影响实体类的生成。
    这个属性用于设置产生的模型类型。模型类型定义了MBG如何去产生模型类。对于一些模型类型,MBG会为每一张表产生单独的实体类,
    而其他的模型类型,MBG会依据表的结构产生一些不同的实体类。
    这个属性支持以下三个值:
        conditional  这是默认值
        这个模型与hierarchical模型相似,除了如果一个实体类只包含一个字段,则不会单独生成此实体类。
        因此,如果一个表的主键只有一个字段,那么不会为该字段生成单独的实体类,会将该字段合并到基本实体类中。
        flat
        该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。一般使用这个模型就够了。
        hierarchical
        如果表有主键,那么该模型会产生一个单独的主键实体类,如果表还有BLOB字段，则会为表生成一个包含所有BLOB字段的单独的实体类,
        然后为所有其他的字段生成一个单独的实体类。MBG会在所有生成的实体类之间维护一个继承关系。显然这个模型比较复杂。
    -->
    <context id="mybatis-generator" defaultModelType="flat" targetRuntime="MyBatis3">

        <commentGenerator>
            <!-- 是否取消生成注释代时间戳 -->
            <property name="suppressDate" value="true"/>
            <!-- 是否取消生成注释 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="${jdbc.driverClassName}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}"/>

        <javaTypeResolver>
            <!-- 是否使用bigDecimal，这里用true，false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <javaModelGenerator targetPackage="com.accelerator.demo.ssm.model.po" targetProject="src/main/java">
            <!-- 是否对model添加 构造函数 -->
            <!--<property name="constructorBased" value="true"/>-->
            <!-- 是否允许子包，即targetPackage.schemaName.tableName 让schema作为包的后缀 -->
            <!--<property name="enableSubPackages" value="false"/>-->
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <!--<property name="immutable" value="true"/>-->
            <!-- 给Model添加一个父类 -->
            <!--<property name="rootClass" value="com.foo.louis.Hello"/>-->
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <!--<property name="trimStrings" value="true"/>-->
        </javaModelGenerator>

        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mybatis.mapper" targetProject="src/main/resources">
            <!-- 是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--
        客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
        type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
        type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
        type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <javaClientGenerator targetPackage="com.accelerator.demo.ssm.model.mapper" targetProject="src/main/resources"
                             type="XMLMAPPER">
            <!-- 是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 反向生成的表名 -->
        <table tableName="user_"
               domainObjectName="User"
               enableUpdateByExample="false"
               enableCountByExample="false"
               enableSelectByExample="false"
               enableDeleteByExample="false">
            <!-- 是否让字段名等同数据库字段名 默认为false -->
            <!--
            例如:假设一个表包含START_DATE列
            如果这个属性是true
            那么MBG生成的属性名是START_DATE 这意味着这个值的getter和setter方法将会是getSTART_DATE()和setSTART_DATE()
            如果这个属性值是fasle
            MBG将会生成的属性名是startDate
            这意味着这个值的getter和setter方法将会是getStartDate()和setStartDate()
            -->
            <property name="useActualColumnNames" value="false"/>
        </table>
    </context>

</generatorConfiguration>